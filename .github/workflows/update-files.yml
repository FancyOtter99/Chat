name: Update Files from URLs

on:
  workflow_dispatch: # Allows you to manually trigger this in the Actions tab
  schedule:
    - cron: '0 * * * *' # Runs every hour, you can change this to whatever you want

jobs:
  update-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests beautifulsoup4

      - name: Run the update script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 <<EOF
from bs4 import BeautifulSoup
import base64
import os
import requests

OWNER = 'FancyOtter99'
REPO = 'Chat'
GITHUB_TOKEN = os.environ['GITHUB_TOKEN']

tasks = [
    {'path': 'users.txt', 'url': 'https://chat-le5h.onrender.com/secret-users?key=letmein'},
    {'path': 'admins.json', 'url': 'https://chat-le5h.onrender.com/secret-roles?key=letmein'},
    {'path': 'user_items.json', 'url': 'https://chat-le5h.onrender.com/secret-items?key=letmein'},
]

def get_pre_content(html):
    soup = BeautifulSoup(html, 'html.parser')
    pres = soup.find_all('pre')
    return '\n\n'.join(pre.get_text() for pre in pres).strip()

def get_file_sha(path):
    url = f'https://api.github.com/repos/{OWNER}/{REPO}/contents/{path}'
    headers = {'Authorization': f'token {GITHUB_TOKEN}'}
    r = requests.get(url, headers=headers)
    if r.status_code == 200:
        return r.json()['sha']
    return None

def update_github_file(content, path, sha=None):
    url = f'https://api.github.com/repos/{OWNER}/{REPO}/contents/{path}'
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github+json'
    }
    message = f'Update {path} with extracted <pre> content'
    encoded_content = base64.b64encode(content.encode('utf-8')).decode('utf-8')
    data = {'message': message, 'content': encoded_content}
    if sha:
        data['sha'] = sha

    r = requests.put(url, headers=headers, json=data)
    print(f'Updated {path}:', r.status_code, r.json())

def update_task(url, path):
    try:
        r = requests.get(url)
        r.raise_for_status()
        pre_content = get_pre_content(r.text)
        sha = get_file_sha(path)
        update_github_file(pre_content, path, sha)
        print(f'{path} update successful!')
    except Exception as e:
        print(f'Error during update for {path}:', e)

for task in tasks:
    update_task(task['url'], task['path'])
EOF
